{"version":3,"sources":["constants/index.js","components/Card/Card.jsx","components/Card/index.js","customHooks/useControlledInput/useControlledInput.js","customHooks/useControlledInput/index.js","components/AddNew/AddNew.jsx","components/AddNew/index.js","components/Lane/Lane.jsx","components/Lane/index.js","components/App/App.jsx","components/App/index.js","serviceWorker.js","index.js","assets/img/plusIcon.svg","assets/img/crossIcon.svg"],"names":["ItemTypes","uuidv4","DropTarget","Card","hover","props","monitor","cardId","onCardMove","sourceCardId","getItem","connect","connectDropTarget","dropTarget","isOver","DragSource","beginDrag","connectDragSource","dragSource","isDragging","task","cardRef","useRef","cardClass","react_default","a","createElement","className","ref","useControlledInput","defaultValue","arguments","length","undefined","defaultValidation","validationCallback","value","test","_useState","useState","_useState2","Object","slicedToArray","input","setInput","_useState3","_useState4","isInputValid","setIsInputValid","useEffect","validationResult","AddNew","_ref","type","laneId","onAdd","_useControlledInput","_useControlledInput2","setValue","isValueValid","isAdding","setIsAdding","onAddNewClose","onAddNewFinish","laneOrCardAccusative","textFieldProps","placeholder","concat","onChange","e","target","onKeyDown","key","shiftKey","autoFocus","assign","rows","disabled","onClick","src","crossIcon","alt","plusIcon","Lane","lane","cards","id","onNewCardAdd","name","map","card","components_Card","components_AddNew","App","lanes","setLanes","updatedLanes","objectSpread","toConsumableArray","trim","sourceId","targetId","sourceLane","find","targetLane","sourceCardIndex","findIndex","sourceCard","targetCardIndex","updatedCards","splice","Boolean","components_Lane","window","location","hostname","match","ReactDOM","render","cjs","backend","HTML5Backend","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3e7208e6.chunk.js","sourcesContent":["/* eslint-disable */\nimport uuidv4 from 'uuid/v4'\n\nexport const LANES_SEED = [\n  {id: uuidv4(), name: 'Test lane', cards: [\n    {id: uuidv4(), task: 'foo'},\n    {id: uuidv4(), task: 'bar'},\n    {id: uuidv4(), task: 'baz'},\n  ]},\n  {id: uuidv4(), name: 'Test lane 2', cards: [\n    {id: uuidv4(), task: 'qwe'},\n    {id: uuidv4(), task: 'asd'},\n    {id: uuidv4(), task: 'zxc'},\n  ]},\n]\n\n\nexport const ItemTypes = {\n  CARD: 'card',\n}","import React, { useRef } from 'react'\nimport { DragSource, DropTarget } from 'react-dnd'\n\nimport { ItemTypes } from '../../constants'\n\nfunction Card(props) {\n  const { task, connectDragSource, isDragging, connectDropTarget, isOver } = props\n\n  const cardRef = useRef()\n  // Assign the drag source role to a node\n  connectDragSource(cardRef)\n  // Assign the drop target role to a node\n  connectDropTarget(cardRef)\n\n  let cardClass = 'box card'\n  if (isDragging || isOver) { cardClass += ' card_dragging' }\n\n  return (\n    <div className={cardClass} ref={cardRef}>\n      {task}\n    </div>\n  )\n}\n\n// Handling drop\nconst dropSpec = {\n  hover(props, monitor) {\n    const { cardId, onCardMove } = props\n    const sourceCardId = monitor.getItem().cardId\n    const targetCardId = cardId\n\n\n    if (sourceCardId === targetCardId) return\n\n    // Perform the move\n    onCardMove(sourceCardId, targetCardId)\n  },\n}\n\nfunction dropCollect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n  }\n}\n\n// Handling drag\nconst dragSpec = {\n  beginDrag(props) {\n    const { cardId } = props\n    return { cardId }\n  },\n}\n\nfunction dragCollect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  }\n}\n\nexport default DropTarget(ItemTypes.CARD, dropSpec, dropCollect)(DragSource(ItemTypes.CARD, dragSpec, dragCollect)(Card))\n","import Card from './Card'\n\nexport default Card\n","import { useState, useEffect } from 'react'\n\n// Custom state hook to control elements and validate input\nfunction useControlledInput(defaultValue = '', defaultValidation = false, validationCallback = value => /\\S+/.test(value)) {\n  const [input, setInput] = useState(defaultValue)\n  const [isInputValid, setIsInputValid] = useState(defaultValidation)\n\n  useEffect(() => {\n    const validationResult = validationCallback(input)\n    setIsInputValid(validationResult)\n  }, [input])\n\n  return [\n    input,\n    setInput,\n    isInputValid,\n    setIsInputValid,\n  ]\n}\n\nexport default useControlledInput\n","import useControlledInput from './useControlledInput'\n\nexport default useControlledInput\n","import React, { useState } from 'react'\n\nimport useControlledInput from '../../customHooks/useControlledInput'\n\nimport plusIcon from '../../assets/img/plusIcon.svg'\nimport crossIcon from '../../assets/img/crossIcon.svg'\n\nfunction AddNew({ type, laneId, onAdd }) {\n  const [value, setValue, isValueValid] = useControlledInput()\n  const [isAdding, setIsAdding] = useState(false)\n\n  function onAddNewClick() {\n    setIsAdding(true)\n  }\n\n  function onAddNewClose() {\n    setIsAdding(false)\n    setValue('')\n  }\n\n  function onAddNewFinish() {\n    if (!isValueValid) return\n\n    onAdd(value, laneId)\n    onAddNewClose()\n  }\n\n  function onInputChange(e) {\n    setValue(e.target.value)\n  }\n\n  function onInputKeyDown(e) {\n    const { key, shiftKey } = e\n\n    switch (true) {\n      case (shiftKey && key === 'Enter'): {\n        break\n      }\n\n      case (key === 'Enter'): {\n        onAddNewFinish()\n        break\n      }\n\n      case (key === 'Escape' || key === 'Esc'): {\n        onAddNewClose()\n        break\n      }\n\n      default:\n        break\n    }\n  }\n\n  const laneOrCardAccusative = type === 'lane' ? 'колонку' : 'карточку'\n  const laneOrCardGenitive = type === 'lane' ? 'колонки' : 'карточки'\n\n  const textFieldProps = {\n    placeholder: `Введите название ${laneOrCardGenitive}`,\n    value,\n    onChange: onInputChange,\n    onKeyDown: onInputKeyDown,\n    autoFocus: true,\n  }\n\n  return (\n    isAdding\n      ? (\n        <div className={`column add-new add-new_${type} add-new__form`}>\n          {type === 'lane' ? <input className=\"box input add-new__input\" type=\"text\" {...textFieldProps} /> : <textarea className=\"box textarea add-new__textarea\" rows=\"2\" {...textFieldProps} />}\n          <div className=\"row add-new__buttons\">\n            <button className=\"button add-new__button\" type=\"button\" disabled={!isValueValid} onClick={onAddNewFinish}>{`Добавить ${laneOrCardAccusative}`}</button>\n            <img className=\"add-new__icon-cross\" src={crossIcon} alt=\"Close\" onClick={onAddNewClose} />\n          </div>\n        </div>\n      )\n\n      : (\n        <div className={`row add-new add-new_${type} add-new__placeholder-${type}`} onClick={onAddNewClick}>\n          <img className=\"add-new__icon-add\" src={plusIcon} alt={`New ${type}`} />\n          <div className=\"add-new__text\">{`Добавить еще одну ${laneOrCardAccusative}`}</div>\n        </div>\n      )\n\n  )\n}\n\nexport default AddNew\n","import AddNew from './AddNew'\n\nexport default AddNew\n","import React from 'react'\nimport { DropTarget } from 'react-dnd'\n\nimport { ItemTypes } from '../../constants'\n\nimport Card from '../Card'\nimport AddNew from '../AddNew'\n\nfunction Lane({ lane, onNewCardAdd, onCardMove, connectDropTarget }) {\n  return connectDropTarget(\n    <div className=\"column lane\">\n      <div className=\"lane__header\">{lane.name}</div>\n\n      <div className=\"lane__body\">\n        {lane.cards.map((card) => {\n          const { id, task } = card\n          return <Card key={id} cardId={id} task={task} onCardMove={onCardMove} />\n        })}\n      </div>\n\n      <div className=\"lane__footer\">\n        <AddNew type=\"card\" laneId={lane.id} onAdd={onNewCardAdd} />\n      </div>\n    </div>,\n  )\n}\n\n// Handling drop\nconst dropSpec = {\n  hover(props, monitor) {\n    const { lane, onCardMove } = props\n\n    const sourceCardId = monitor.getItem().cardId\n\n    if (lane.cards.length) return\n\n    // Perform the move\n    onCardMove(sourceCardId, lane.id)\n  },\n}\n\nfunction dropCollect(connect) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n  }\n}\n\nexport default DropTarget(ItemTypes.CARD, dropSpec, dropCollect)(Lane)\n","import Lane from './Lane'\n\nexport default Lane\n","import React, { useState } from 'react'\nimport uuidv4 from 'uuid/v4'\n\nimport Lane from '../Lane'\nimport AddNew from '../AddNew'\n\nfunction App() {\n  const [lanes, setLanes] = useState([])\n\n  function onNewLaneAdd(name) {\n    const id = uuidv4()\n\n    setLanes([...lanes, { id, name: name.trim(), cards: [] }])\n  }\n\n  function onNewCardAdd(task, laneId) {\n    const id = uuidv4()\n    const updatedLanes = lanes.map((lane) => {\n      if (lane.id === laneId) {\n        return { ...lane, cards: [...lane.cards, { id, task: task.trim() }] }\n      }\n      return lane\n    })\n\n    setLanes(updatedLanes)\n  }\n\n  function onCardMove(sourceId, targetId) {\n    const sourceLane = lanes.find(lane => lane.cards.find(card => card.id === sourceId))\n    const targetLane = lanes.find(lane => lane.cards.find(card => card.id === targetId)) || lanes.find(lane => lane.id === targetId) // second condition need to handle card moving to new empty lane\n\n    const sourceCardIndex = sourceLane.cards.findIndex(card => card.id === sourceId)\n    const sourceCard = sourceLane.cards[sourceCardIndex]\n    const targetCardIndex = targetLane.cards.findIndex(card => card.id === targetId)\n\n    let updatedLanes\n    if (sourceLane === targetLane) {\n      updatedLanes = lanes.map((lane) => {\n        if (lane.id === targetLane.id) {\n          const updatedCards = [...lane.cards]\n          updatedCards.splice(sourceCardIndex, 1)\n          updatedCards.splice(targetCardIndex, 0, sourceCard)\n\n          return { ...lane, cards: updatedCards }\n        }\n\n        return lane\n      })\n    } else {\n      updatedLanes = lanes.map((lane) => {\n        if (lane.id === sourceLane.id) {\n          const updatedCards = [...lane.cards]\n          updatedCards.splice(sourceCardIndex, 1)\n\n          return { ...lane, cards: updatedCards }\n        }\n\n        if (lane.id === targetLane.id) {\n          const updatedCards = [...lane.cards]\n          updatedCards.splice(targetCardIndex, 0, sourceCard)\n\n          return { ...lane, cards: updatedCards }\n        }\n\n        return lane\n      })\n    }\n\n    setLanes(updatedLanes)\n  }\n\n  return (\n    <div className=\"row app\">\n      {Boolean(lanes.length) && lanes.map((lane) => {\n        return <Lane key={lane.id} lane={lane} onNewCardAdd={onNewCardAdd} onCardMove={onCardMove} />\n      })}\n\n      <AddNew type=\"lane\" onAdd={onNewLaneAdd} />\n    </div>\n  )\n}\n\nexport default App\n","import App from './App'\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { DragDropContextProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\n\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.scss'\n\nReactDOM.render(\n  <DragDropContextProvider backend={HTML5Backend}>\n    <App />\n  </DragDropContextProvider>,\n\n  document.getElementById('root'),\n)\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/plusIcon.61af6571.svg\";","module.exports = __webpack_public_path__ + \"static/media/crossIcon.220fb32e.svg\";"],"sourceRoot":""}