{"version":3,"sources":["constants/actionTypes.js","constants/seeds.js","reducers/laneReducer.js","reducers/cardReducer.js","store/index.js","action_creators/lanes.js","constants/dndTypes.js","components/Card/Card.jsx","components/Card/index.js","customHooks/useControlledInput/useControlledInput.js","customHooks/useControlledInput/index.js","customHooks/usComponentFocused/useComponentFocused.js","customHooks/usComponentFocused/index.js","components/AddNew/AddNew.jsx","components/AddNew/index.js","action_creators/cards.js","components/Lane/Lane.jsx","components/Lane/index.js","components/CustomDragLayer/CardDragLayer.jsx","components/CustomDragLayer/CustomDragLayer.jsx","components/CustomDragLayer/index.js","components/App/App.jsx","components/App/index.js","index.js","assets/img/plusIcon.svg","assets/img/crossIcon.svg"],"names":["LANE_ADD","CARD_ADD","CARD_MOVE","lanesSeed","entities","1","id","name","cardIds","2","3","ids","cardsSeed","task","laneReducer","state","arguments","length","undefined","action","type","uuid","lane","trim","Object","objectSpread","defineProperty","concat","toConsumableArray","applyAddLane","_action$card","card","laneId","cardId","updatedLane","applyAddCardToLane","_objectSpread5","sourceCardId","targetId","sourceLaneId","targetLaneId","idsLength","i","laneCardIds","isSourceLaneFound","includes","isTargetLaneFound","sourceLane","targetLane","sourceCardIndex","findIndex","targetCardIndex","updatedCardIds","splice","updatedSourceLaneCardIds","updatedSourceLane","updatedTargetLaneCardIds","updatedTargetLane","applyMoveCard","cardReducer","applyAddCard","rootReducer","combineReducers","laneState","cardState","logger","createLogger","store","createStore","applyMiddleware","doMoveCard","ItemTypes","CARD","Card","forwardRef","props","ref","connectDragSource","connectDragPreview","isDragging","connectDropTarget","useEffect","getEmptyImage","cardRef","useRef","useImperativeHandle","getNode","current","cardClass","react_default","a","createElement","className","DragSourceCard","DragSource","beginDrag","monitor","component","cardIndex","_component$getNode$ge","getBoundingClientRect","height","width","connect","dragSource","dragPreview","DropTargetCard","DropTarget","hover","node","onCardMove","getItem","targetCardId","targetBoundingRect","targetMiddleY","bottom","top","targetClientY","getClientOffset","y","dropTarget","dispatch","useControlledInput","defaultValue","defaultValidation","validationCallback","value","test","_useState","useState","_useState2","slicedToArray","input","setInput","_useState3","_useState4","isInputValid","setIsInputValid","validationResult","useComponentFocused","lossFocusEvents","onFocusLossCallback","initialFocus","isComponentFocused","setIsComponentFocused","handleClickOutside","e","contains","target","forEach","event","document","addEventListener","removeEventListener","AddNew","onAdd","_ref","_useControlledInput","_useControlledInput2","setValue","isValueValid","_useComponentFocused","_useComponentFocused2","focusComponentRef","onAddNewClose","onAddNewFinish","laneOrCardAccusative","textFieldProps","placeholder","onChange","onKeyDown","key","shiftKey","autoFocus","assign","rows","disabled","onClick","src","crossIcon","alt","plusIcon","DropTargetLane","map","index","components_Card","components_AddNew","Lane","CardDragLayer","item","cardDragLayerStyles","transform","style","CustomDragLayer","DragLayer","itemType","getItemType","currentSourceOffset","getSourceClientOffset","x","getDragLayerStyles","CustomDragLayer_CardDragLayer","renderDragLayer","App","laneIds","components_CustomDragLayer","Boolean","components_Lane","ReactDOM","render","es","cjs","backend","HTML5Backend","components_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8f22378d.chunk.js","sourcesContent":["const LANE_ADD = 'LANE_ADD'\nconst CARD_ADD = 'CARD_ADD'\nconst CARD_MOVE = 'CARD_MOVE'\n\nexport {\n  LANE_ADD,\n  CARD_ADD,\n  CARD_MOVE,\n}\n","const lanesSeed = {\n  entities: {\n    1: { id: 1, name: 'To do', cardIds: ['1', '2', '3'] },\n    2: { id: 2, name: 'In progress', cardIds: [] },\n    3: { id: 3, name: 'Done', cardIds: [] },\n  },\n  ids: [1, 2, 3],\n}\n\nconst cardsSeed = {\n  entities: {\n    1: { id: 1, task: 'Quis quis do ullamco excepteur ipsum ut ad non.' },\n    2: { id: 2, task: 'Sint aliqua anim adipisicing aute. Dolore duis pariatur sint excepteur commodo nostrud aliqua culpa. Minim laborum voluptate commodo id nostrud ex eu.' },\n    3: { id: 3, task: 'Enim enim amet fugiat.' },\n  },\n  ids: [1, 2, 3],\n}\n\nexport {\n  lanesSeed,\n  cardsSeed,\n}\n","import uuid from 'uuid/v4'\nimport { LANE_ADD, CARD_ADD, CARD_MOVE } from '../constants/actionTypes'\nimport { lanesSeed } from '../constants/seeds'\n\nfunction applyAddLane(state, action) {\n  const id = uuid()\n  const lane = { id, name: action.name.trim(), cardIds: [] }\n  const entities = { ...state.entities, [id]: lane }\n  const ids = [...state.ids, id]\n\n  return { ...state, entities, ids }\n}\n\nfunction applyAddCardToLane(state, action) {\n  const { laneId, cardId } = action.card\n  const lane = state.entities[laneId]\n  const updatedLane = { ...lane, cardIds: [...lane.cardIds, cardId] }\n  const entities = { ...state.entities, [laneId]: updatedLane }\n\n  return { ...state, entities }\n}\n\nfunction applyMoveCard(state, action) {\n  const { sourceCardId, targetId } = action\n\n  // Search source and target lanes\n  let sourceLaneId = null\n  let targetLaneId = null\n  const idsLength = state.ids.length\n\n  for (let i = 0; i < idsLength; i += 1) {\n    const laneCardIds = state.entities[state.ids[i]].cardIds\n\n    const isSourceLaneFound = laneCardIds.includes(sourceCardId)\n    const isTargetLaneFound = laneCardIds.includes(targetId) || (state.ids[i] === targetId) // second condition need to handle card moving to new empty lane\n\n    if (isSourceLaneFound) {\n      sourceLaneId = state.ids[i]\n      if (targetLaneId) break\n    }\n\n    if (isTargetLaneFound) {\n      targetLaneId = state.ids[i]\n      if (sourceLaneId) break\n    }\n  }\n\n  const sourceLane = state.entities[sourceLaneId]\n  const targetLane = state.entities[targetLaneId] || state.entities[targetId] // second condition need to handle card moving to new empty lane\n\n  // Search source and target card indexes in cardIds array\n  const sourceCardIndex = sourceLane.cardIds.findIndex(cardId => cardId === sourceCardId)\n  const targetCardIndex = targetLane.cardIds.findIndex(cardId => cardId === targetId)\n\n  // Perform card move within one lane\n  if (sourceLaneId === targetLaneId) {\n    const updatedCardIds = [...sourceLane.cardIds]\n    updatedCardIds.splice(sourceCardIndex, 1)\n    updatedCardIds.splice(targetCardIndex, 0, sourceCardId)\n\n    const updatedLane = { ...sourceLane, cardIds: updatedCardIds }\n    const entities = { ...state.entities, [sourceLaneId]: updatedLane }\n    return { ...state, entities }\n  }\n\n  // Perform card move between lanes\n  const updatedSourceLaneCardIds = [...sourceLane.cardIds]\n  updatedSourceLaneCardIds.splice(sourceCardIndex, 1)\n  const updatedSourceLane = { ...sourceLane, cardIds: updatedSourceLaneCardIds } \n\n  const updatedTargetLaneCardIds = [...targetLane.cardIds]\n  updatedTargetLaneCardIds.splice(targetCardIndex, 0, sourceCardId)\n  const updatedTargetLane = { ...targetLane, cardIds: updatedTargetLaneCardIds }\n\n  const entities = { ...state.entities, [sourceLaneId]: updatedSourceLane, [targetLaneId]: updatedTargetLane }\n\n  return { ...state, entities }\n}\n\nfunction laneReducer(state = lanesSeed, action) {\n  switch (action.type) {\n    case LANE_ADD: {\n      return applyAddLane(state, action)\n    }\n    case CARD_ADD: {\n      return applyAddCardToLane(state, action)\n    }\n    case CARD_MOVE: {\n      return applyMoveCard(state, action)\n    }\n    default: return state\n  }\n}\n\nexport default laneReducer\n","import { CARD_ADD } from '../constants/actionTypes'\nimport { cardsSeed } from '../constants/seeds'\n\nfunction applyAddCard(state, action) {\n  const { cardId, task } = action.card\n  const card = { id: cardId, task: task.trim() }\n  const entities = { ...state.entities, [cardId]: card }\n  const ids = [...state.ids, cardId]\n\n  return { ...state, entities, ids }\n}\n\nfunction cardReducer(state = cardsSeed, action) {\n  switch (action.type) {\n    case CARD_ADD: {\n      return applyAddCard(state, action)\n    }\n    default: return state\n  }\n}\n\nexport default cardReducer\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger'\n\nimport laneReducer from '../reducers/laneReducer'\nimport cardReducer from '../reducers/cardReducer'\n\nconst rootReducer = combineReducers({\n  laneState: laneReducer,\n  cardState: cardReducer,\n})\n\nconst logger = createLogger()\n\nconst store = createStore(\n  rootReducer,\n  undefined,\n  applyMiddleware(logger),\n)\n\nexport default store\n","import { LANE_ADD, CARD_MOVE } from '../constants/actionTypes'\n\nfunction doAddLane(name) {\n  return {\n    type: LANE_ADD,\n    name,\n  }\n}\n\nfunction doMoveCard(sourceCardId, targetId) {\n  return {\n    type: CARD_MOVE,\n    sourceCardId,\n    targetId,\n  }\n}\n\nexport {\n  doAddLane,\n  doMoveCard,\n}\n","export const ItemTypes = {\n  CARD: 'card',\n}\n","import React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react'\nimport { connect } from 'react-redux'\nimport { DragSource, DropTarget } from 'react-dnd'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\nimport { doMoveCard } from '../../action_creators/lanes'\nimport { ItemTypes } from '../../constants/dndTypes'\n\nconst Card = forwardRef((props, ref) => {\n  const { task, connectDragSource, connectDragPreview, isDragging, connectDropTarget } = props\n\n  // Use empty image as a drag preview so browsers don't draw it\n  // and we can draw whatever we want on the custom drag layer instead.\n  useEffect(() => {\n    connectDragPreview(getEmptyImage())\n  }, [])\n\n  const cardRef = useRef()\n  // Exposing node to parent element (DnD HOC)\n  useImperativeHandle(ref, () => ({\n    getNode: () => cardRef.current,\n  }))\n  // Assign the drag source role to a node\n  connectDragSource(cardRef)\n  // Assign the drop target role to a node\n  connectDropTarget(cardRef)\n\n  let cardClass = 'box card'\n  if (isDragging) { cardClass += ' card_dragging' }\n\n  return (\n    <div className={cardClass} ref={cardRef}>\n      {task}\n    </div>\n  )\n})\n\n// Handling drop\nconst dropSpec = {\n  hover(props, monitor, component) {\n    if (!component) return null\n\n    // node = HTML Div element from imperative API\n    const node = component.getNode()\n    if (!node) return null\n\n    const { cardId, cardIndex, onCardMove } = props\n\n    const sourceCardIndex = monitor.getItem().cardIndex\n    const targetCardIndex = cardIndex\n\n    const sourceCardId = monitor.getItem().cardId\n    const targetCardId = cardId\n\n    // Don't replace items with themselves\n    if (sourceCardId === targetCardId) return\n\n    // Determine rectangle on screen\n    const targetBoundingRect = node.getBoundingClientRect()\n\n    // Get vertical middle\n    const targetMiddleY = (targetBoundingRect.bottom - targetBoundingRect.top) / 2\n\n    // Determine mouse position\n    const clientOffset = monitor.getClientOffset()\n\n    // Get pixels to the top\n    const targetClientY = clientOffset.y - targetBoundingRect.top\n\n    // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n    // Dragging downwards\n    if (sourceCardIndex < targetCardIndex && targetClientY < targetMiddleY) return\n    // Dragging upwards\n    if (sourceCardIndex > targetCardIndex && targetClientY > targetMiddleY) return\n\n    // Perform the move\n    onCardMove(sourceCardId, targetCardId)\n\n    // Updating the index of the moved card\n    monitor.getItem().cardIndex = targetCardIndex\n  },\n}\n\nfunction dropCollect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n  }\n}\n\n// Handling drag'n'drop\nconst dragSpec = {\n  beginDrag(props, monitor, component) {\n    const { cardId, cardIndex } = props\n    const { height, width } = component.getNode().getBoundingClientRect()\n    return {\n      cardId,\n      cardIndex,\n      height,\n      width,\n    }\n  },\n}\n\nfunction dragCollect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging(),\n  }\n}\n\nconst DragSourceCard = DragSource(ItemTypes.CARD, dragSpec, dragCollect)(Card)\nconst DropTargetCard = DropTarget(ItemTypes.CARD, dropSpec, dropCollect)(DragSourceCard)\n\n// Connecting redux\nfunction mapStateToProps(state, props) {\n  return {\n    task: state.cardState.entities[props.cardId].task,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onCardMove: (sourceCardId, targetCardId) => dispatch(doMoveCard(sourceCardId, targetCardId)),\n  }\n}\n\nconst ConnectedCard = connect(mapStateToProps, mapDispatchToProps)(DropTargetCard)\n\nexport default ConnectedCard\n","import Card from './Card'\n\nexport default Card\n","import { useState, useEffect } from 'react'\n\n// Custom state hook to control elements and validate input\nfunction useControlledInput(defaultValue = '', defaultValidation = false, validationCallback = value => /\\S+/.test(value)) {\n  const [input, setInput] = useState(defaultValue)\n  const [isInputValid, setIsInputValid] = useState(defaultValidation)\n\n  useEffect(() => {\n    const validationResult = validationCallback(input)\n    setIsInputValid(validationResult)\n  }, [input])\n\n  return [\n    input,\n    setInput,\n    isInputValid,\n    setIsInputValid,\n  ]\n}\n\nexport default useControlledInput\n","import useControlledInput from './useControlledInput'\n\nexport default useControlledInput\n","import { useState, useEffect, useRef } from 'react'\n\nfunction useComponentFocused(lossFocusEvents = ['click'], onFocusLossCallback = () => {}, initialFocus = false) {\n  const [isComponentFocused, setIsComponentFocused] = useState(initialFocus)\n  const ref = useRef(null)\n\n  function handleClickOutside(e) {\n    if (ref.current && !ref.current.contains(e.target)) {\n      setIsComponentFocused(false)\n      onFocusLossCallback()\n    }\n  }\n\n  useEffect(() => {\n    lossFocusEvents.forEach((event) => {\n      document.addEventListener(event, handleClickOutside)\n    })\n    return () => {\n      lossFocusEvents.forEach((event) => {\n        document.removeEventListener(event, handleClickOutside)\n      })\n    }\n  }, [])\n\n  return [\n    ref,\n    isComponentFocused,\n    setIsComponentFocused,\n  ]\n}\n\nexport default useComponentFocused\n","import useComponentFocused from './useComponentFocused'\n\nexport default useComponentFocused\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport uuid from 'uuid/v4'\n\nimport { doAddLane } from '../../action_creators/lanes'\nimport { doAddCard } from '../../action_creators/cards'\n\nimport useControlledInput from '../../customHooks/useControlledInput'\nimport useComponentFocused from '../../customHooks/usComponentFocused'\n\nimport plusIcon from '../../assets/img/plusIcon.svg'\nimport crossIcon from '../../assets/img/crossIcon.svg'\n\nfunction AddNew({ type, laneId, onAdd }) {\n  const [value, setValue, isValueValid] = useControlledInput()\n  const [focusComponentRef, isComponentFocused, setIsComponentFocused] = useComponentFocused(['click', 'drag'], () => setValue(''))\n\n  function onAddNewClick() {\n    setIsComponentFocused(true)\n  }\n\n  function onAddNewClose() {\n    setIsComponentFocused(false)\n    setValue('')\n  }\n\n  function onAddNewFinish() {\n    if (!isValueValid) return\n\n    onAdd(value, laneId)\n    onAddNewClose()\n  }\n\n  function onInputChange(e) {\n    setValue(e.target.value)\n  }\n\n  function onInputKeyDown(e) {\n    const { key, shiftKey } = e\n\n    switch (true) {\n      case (shiftKey && key === 'Enter'): {\n        break\n      }\n\n      case (key === 'Enter'): {\n        onAddNewFinish()\n        break\n      }\n\n      case (key === 'Escape' || key === 'Esc'): {\n        onAddNewClose()\n        break\n      }\n\n      default:\n        break\n    }\n  }\n\n  const laneOrCardAccusative = type === 'lane' ? 'колонку' : 'карточку'\n  const laneOrCardGenitive = type === 'lane' ? 'колонки' : 'карточки'\n\n  const textFieldProps = {\n    placeholder: `Введите название ${laneOrCardGenitive}`,\n    value,\n    onChange: onInputChange,\n    onKeyDown: onInputKeyDown,\n    autoFocus: true,\n  }\n\n  return (\n    isComponentFocused\n      ? (\n        <div className={`column add-new add-new_${type} add-new__form`} ref={focusComponentRef}>\n          {type === 'lane' ? <input className=\"box input add-new__input\" type=\"text\" {...textFieldProps} /> : <textarea className=\"box textarea add-new__textarea\" rows=\"2\" {...textFieldProps} />}\n          <div className=\"row add-new__buttons\">\n            <button className=\"button add-new__button\" type=\"button\" disabled={!isValueValid} onClick={onAddNewFinish}>{`Добавить ${laneOrCardAccusative}`}</button>\n            <img className=\"add-new__icon-cross\" src={crossIcon} alt=\"Close\" onClick={onAddNewClose} />\n          </div>\n        </div>\n      )\n\n      : (\n        <div className={`row add-new add-new_${type} add-new__placeholder-${type}`} onClick={onAddNewClick}>\n          <img className=\"add-new__icon-add\" src={plusIcon} alt={`New ${type}`} />\n          <div className=\"add-new__text\">{`Добавить еще одну ${laneOrCardAccusative}`}</div>\n        </div>\n      )\n\n  )\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    onAdd: (value, laneId) => dispatch(props.type === 'lane' ? doAddLane(value) : doAddCard({ laneId, cardId: uuid(), task: value })),\n  }\n}\n\nconst ConnectedAddNew = connect(null, mapDispatchToProps)(AddNew)\n\nexport default ConnectedAddNew\n","import AddNew from './AddNew'\n\nexport default AddNew\n","import { CARD_ADD } from '../constants/actionTypes'\n\nfunction doAddCard(card) {\n  return {\n    type: CARD_ADD,\n    card,\n  }\n}\n\nexport {\n  doAddCard,\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { DropTarget } from 'react-dnd'\n\nimport { doMoveCard } from '../../action_creators/lanes'\nimport { ItemTypes } from '../../constants/dndTypes'\n\nimport Card from '../Card'\nimport AddNew from '../AddNew'\n\nfunction Lane({ lane, connectDropTarget }) {\n  return connectDropTarget(\n    <div className=\"column lane\">\n      <div className=\"lane__header\">{lane.name}</div>\n\n      <div className=\"lane__body\">\n        {lane.cardIds.map((cardId, index) => {\n          return <Card key={cardId} cardId={cardId} cardIndex={index} />\n        })}\n      </div>\n\n      <div className=\"lane__footer\">\n        <AddNew type=\"card\" laneId={lane.id} />\n      </div>\n    </div>,\n  )\n}\n\n// Handling drop\nconst dropSpec = {\n  hover(props, monitor) {\n    const { lane, onCardMove } = props\n\n    const sourceCardId = monitor.getItem().cardId\n\n    if (lane.cardIds.length) return\n\n    // Perform the move\n    onCardMove(sourceCardId, lane.id)\n  },\n}\n\nfunction dropCollect(connect) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n  }\n}\n\nconst DropTargetLane = DropTarget(ItemTypes.CARD, dropSpec, dropCollect)(Lane)\n\n// Connecting redux\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onCardMove: (sourceCardId, laneId) => dispatch(doMoveCard(sourceCardId, laneId)),\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  return {\n    lane: state.laneState.entities[props.laneId],\n  }\n}\n\nconst ConnectedLane = connect(mapStateToProps, mapDispatchToProps)(DropTargetLane)\n\nexport default ConnectedLane\n","import Lane from './Lane'\n\nexport default Lane\n","import React from 'react'\n\nimport Card from '../Card'\n\nfunction CardDragLayer({ item }) {\n  const { cardId, height, width } = item\n\n  const cardDragLayerStyles = {\n    height,\n    width,\n    transform: 'rotate(5deg)',\n  }\n  return (\n    <div style={cardDragLayerStyles}>\n      <Card cardId={cardId} />\n    </div>\n  )\n}\n\nexport default CardDragLayer\n","import React from 'react'\nimport { DragLayer } from 'react-dnd'\n\nimport { ItemTypes } from '../../constants/dndTypes'\nimport CardDragLayer from './CardDragLayer'\n\nfunction CustomDragLayer({ item, itemType, currentSourceOffset, isDragging }) {\n  if (!isDragging) return null\n\n  const renderDragLayer = () => {\n    switch (itemType) {\n      case ItemTypes.CARD:\n        return <CardDragLayer item={item} />\n      default:\n        return null\n    }\n  }\n\n  const getDragLayerStyles = () => {\n    if (!currentSourceOffset) return {}\n\n    const { x, y } = currentSourceOffset\n    return {\n      transform: `translate(${x}px, ${y}px)`,\n    }\n  }\n\n  return (\n    <div className=\"custom-drag-layer\" style={getDragLayerStyles()}>\n      {renderDragLayer()}\n    </div>\n  )\n}\n\nconst collect = monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  currentSourceOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n})\n\nexport default DragLayer(collect)(CustomDragLayer)\n","import CustomDragLayer from './CustomDragLayer'\n\nexport default CustomDragLayer\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Lane from '../Lane'\nimport AddNew from '../AddNew'\nimport CustomDragLayer from '../CustomDragLayer'\n\nfunction App({ laneIds }) {\n  return (\n    <div className=\"row app\">\n      <CustomDragLayer />\n\n      {Boolean(laneIds.length) && laneIds.map(laneId => (\n        <Lane key={laneId} laneId={laneId} />\n      ))}\n\n      <AddNew type=\"lane\" />\n    </div>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n    laneIds: state.laneState.ids,\n  }\n}\n\nconst ConnectedApp = connect(mapStateToProps)(App)\n\nexport default ConnectedApp\n","import App from './App'\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { DragDropContextProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\n\nimport store from './store'\nimport App from './components/App'\n\nimport './index.scss'\n\nif (module.hot) {\n  module.hot.accept()\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <DragDropContextProvider backend={HTML5Backend}>\n      <App />\n    </DragDropContextProvider>\n  </Provider>,\n\n  document.getElementById('root'),\n)\n","module.exports = __webpack_public_path__ + \"static/media/plusIcon.61af6571.svg\";","module.exports = __webpack_public_path__ + \"static/media/crossIcon.220fb32e.svg\";"],"sourceRoot":""}