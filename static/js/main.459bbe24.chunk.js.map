{"version":3,"sources":["components/Card/Card.jsx","components/Card/index.js","customHooks/useControlledInput/useControlledInput.js","customHooks/useControlledInput/index.js","components/AddNew/AddNew.jsx","components/AddNew/index.js","components/Lane/Lane.jsx","components/Lane/index.js","components/App/App.jsx","components/App/index.js","serviceWorker.js","index.js","assets/img/plusIcon.svg","assets/img/crossIcon.svg"],"names":["Card","_ref","task","react_default","a","createElement","className","useControlledInput","defaultValue","arguments","length","undefined","defaultValidation","validationCallback","value","test","_useState","useState","_useState2","Object","slicedToArray","input","setInput","_useState3","_useState4","isInputValid","setIsInputValid","useEffect","validationResult","AddNew","type","onAdd","_useControlledInput","_useControlledInput2","setValue","isValueValid","isAdding","setIsAdding","onAddNewClose","onAddNewFinish","laneOrCardAccusative","textFieldProps","placeholder","concat","onChange","e","target","onKeyDown","key","shiftKey","autoFocus","assign","rows","disabled","onClick","src","crossIcon","alt","plusIcon","Lane","name","cards","onNewCardAdd","map","card","id","components_Card","components_AddNew","App","lanes","setLanes","laneId","uuidv4","updatedLanes","lane","objectSpread","toConsumableArray","trim","Boolean","components_Lane","bind","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.459bbe24.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Card({ task }) {\n  return (\n    <div className=\"box card\">\n      {task}\n    </div>\n  )\n}\n\nexport default Card\n","import Card from './Card'\n\nexport default Card\n","import { useState, useEffect } from 'react'\n\n// Custom state hook to control elements and validate input\nfunction useControlledInput(defaultValue = '', defaultValidation = false, validationCallback = value => /\\S+/.test(value)) {\n  const [input, setInput] = useState(defaultValue)\n  const [isInputValid, setIsInputValid] = useState(defaultValidation)\n\n  useEffect(() => {\n    const validationResult = validationCallback(input)\n    setIsInputValid(validationResult)\n  }, [input])\n\n  return [\n    input,\n    setInput,\n    isInputValid,\n    setIsInputValid,\n  ]\n}\n\nexport default useControlledInput\n","import useControlledInput from './useControlledInput'\n\nexport default useControlledInput\n","import React, { useState } from 'react'\n\nimport useControlledInput from '../../customHooks/useControlledInput'\n\nimport plusIcon from '../../assets/img/plusIcon.svg'\nimport crossIcon from '../../assets/img/crossIcon.svg'\n\nfunction AddNew({ type, onAdd }) {\n  const [value, setValue, isValueValid] = useControlledInput()\n  const [isAdding, setIsAdding] = useState(false)\n\n  function onAddNewClick() {\n    setIsAdding(true)\n  }\n\n  function onAddNewClose() {\n    setIsAdding(false)\n    setValue('')\n  }\n\n  function onAddNewFinish() {\n    if (!isValueValid) return\n\n    onAdd(value)\n    onAddNewClose()\n  }\n\n  function onInputChange(e) {\n    setValue(e.target.value)\n  }\n\n  function onInputKeyDown(e) {\n    const { key, shiftKey } = e\n\n    switch (true) {\n      case (shiftKey && key === 'Enter'): {\n        break\n      }\n\n      case (key === 'Enter'): {\n        onAddNewFinish()\n        break\n      }\n\n      case (key === 'Escape' || key === 'Esc'): {\n        onAddNewClose()\n        break\n      }\n\n      default:\n        break\n    }\n  }\n\n  const laneOrCardAccusative = type === 'lane' ? 'колонку' : 'карточку'\n  const laneOrCardGenitive = type === 'lane' ? 'колонки' : 'карточки'\n\n  const textFieldProps = {\n    placeholder: `Введите название ${laneOrCardGenitive}`,\n    value,\n    onChange: onInputChange,\n    onKeyDown: onInputKeyDown,\n    autoFocus: true,\n  }\n\n  return (\n    isAdding\n      ? (\n        <div className={`column add-new add-new_${type} add-new__form`}>\n          {type === 'lane' ? <input className=\"box input add-new__input\" type=\"text\" {...textFieldProps} /> : <textarea className=\"box textarea add-new__textarea\" rows=\"2\" {...textFieldProps} />}\n          <div className=\"row add-new__buttons\">\n            <button className=\"button add-new__button\" type=\"button\" disabled={!isValueValid} onClick={onAddNewFinish}>{`Добавить ${laneOrCardAccusative}`}</button>\n            <img className=\"add-new__icon-cross\" src={crossIcon} alt=\"Close\" onClick={onAddNewClose} />\n          </div>\n        </div>\n      )\n\n      : (\n        <div className={`row add-new add-new_${type} add-new__placeholder-${type}`} onClick={onAddNewClick}>\n          <img className=\"add-new__icon-add\" src={plusIcon} alt={`New ${type}`} />\n          <div className=\"add-new__text\">{`Добавить еще одну ${laneOrCardAccusative}`}</div>\n        </div>\n      )\n\n  )\n}\n\nexport default AddNew\n","import AddNew from './AddNew'\n\nexport default AddNew\n","import React from 'react'\n\nimport Card from '../Card'\nimport AddNew from '../AddNew'\n\nfunction Lane({ name, cards, onNewCardAdd }) {\n  return (\n    <div className=\"column lane\">\n      <div className=\"lane__header\">{name}</div>\n\n      <div className=\"lane__body\">\n        {cards.map((card) => {\n          const { id, task } = card\n          return <Card key={id} task={task} />\n        })}\n      </div>\n\n      <div className=\"lane__footer\">\n        <AddNew type=\"card\" onAdd={onNewCardAdd} />\n      </div>\n    </div>\n  )\n}\n\nexport default Lane\n","import Lane from './Lane'\n\nexport default Lane\n","import React, { useState } from 'react'\nimport uuidv4 from 'uuid/v4'\n\nimport Lane from '../Lane'\nimport AddNew from '../AddNew'\n\nfunction App() {\n  const [lanes, setLanes] = useState([])\n\n  function onNewLaneAdd(name) {\n    const id = uuidv4()\n\n    setLanes([...lanes, { id, name: name.trim(), cards: [] }])\n  }\n\n  function onNewCardAdd(laneId, task) {\n    const id = uuidv4()\n    const updatedLanes = lanes.map((lane) => {\n      if (lane.id === laneId) {\n        return { ...lane, cards: [...lane.cards, { id, task: task.trim() }] }\n      }\n      return lane\n    })\n\n    setLanes(updatedLanes)\n  }\n\n  return (\n    <div className=\"row app\">\n      {Boolean(lanes.length) && lanes.map((lane) => {\n        const { id, name, cards } = lane\n        return <Lane key={id} name={name} cards={cards} onNewCardAdd={onNewCardAdd.bind(null, id)} />\n      })}\n\n      <AddNew type=\"lane\" onAdd={onNewLaneAdd} />\n    </div>\n  )\n}\n\nexport default App\n","import App from './App'\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/plusIcon.61af6571.svg\";","module.exports = __webpack_public_path__ + \"static/media/crossIcon.220fb32e.svg\";"],"sourceRoot":""}