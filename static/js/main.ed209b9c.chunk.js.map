{"version":3,"sources":["constants/actionTypes.js","reducers/laneReducer.js","reducers/cardReducer.js","store/index.js","action_creators/lanes.js","constants/dndTypes.js","components/Card/Card.jsx","components/Card/index.js","customHooks/useControlledInput/useControlledInput.js","customHooks/useControlledInput/index.js","components/AddNew/AddNew.jsx","components/AddNew/index.js","action_creators/cards.js","components/Lane/Lane.jsx","components/Lane/index.js","components/App/App.jsx","components/App/index.js","index.js","assets/img/plusIcon.svg","assets/img/crossIcon.svg"],"names":["LANE_ADD","CARD_ADD","CARD_MOVE","laneReducer","state","arguments","length","undefined","entities","ids","action","type","id","uuid","lane","name","trim","cardIds","Object","objectSpread","defineProperty","concat","toConsumableArray","applyAddLane","_action$card","card","laneId","cardId","updatedLane","applyAddCardToLane","_objectSpread5","sourceCardId","targetId","sourceLaneId","targetLaneId","idsLength","i","laneCardIds","isSourceLaneFound","includes","isTargetLaneFound","sourceLane","targetLane","sourceCardIndex","findIndex","targetCardIndex","updatedCardIds","splice","updatedSourceLaneCardIds","updatedSourceLane","updatedTargetLaneCardIds","updatedTargetLane","applyMoveCard","cardReducer","task","applyAddCard","rootReducer","combineReducers","laneState","cardState","logger","createLogger","store","createStore","applyMiddleware","doMoveCard","ItemTypes","DragSourceCard","DragSource","beginDrag","props","connect","monitor","connectDragSource","dragSource","isDragging","connectDropTarget","isOver","cardRef","useRef","cardClass","react_default","a","createElement","className","ref","DropTargetCard","DropTarget","hover","onCardMove","getItem","dropTarget","Card","dispatch","targetCardId","useControlledInput","defaultValue","defaultValidation","validationCallback","value","test","_useState","useState","_useState2","slicedToArray","input","setInput","_useState3","_useState4","isInputValid","setIsInputValid","useEffect","validationResult","AddNew","onAdd","_ref","_useControlledInput","_useControlledInput2","setValue","isValueValid","isAdding","setIsAdding","onAddNewClose","onAddNewFinish","laneOrCardAccusative","textFieldProps","placeholder","onChange","e","target","onKeyDown","key","shiftKey","autoFocus","assign","rows","disabled","onClick","src","crossIcon","alt","plusIcon","DropTargetLane","map","components_Card","components_AddNew","Lane","App","laneIds","Boolean","components_Lane","ReactDOM","render","es","cjs","backend","HTML5Backend","components_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ed209b9c.chunk.js","sourcesContent":["const LANE_ADD = 'LANE_ADD'\nconst CARD_ADD = 'CARD_ADD'\nconst CARD_MOVE = 'CARD_MOVE'\n\nexport {\n  LANE_ADD,\n  CARD_ADD,\n  CARD_MOVE,\n}\n","import uuid from 'uuid/v4'\nimport { LANE_ADD, CARD_ADD, CARD_MOVE } from '../constants/actionTypes'\n\nfunction applyAddLane(state, action) {\n  const id = uuid()\n  const lane = { id, name: action.name.trim(), cardIds: [] }\n  const entities = { ...state.entities, [id]: lane }\n  const ids = [...state.ids, id]\n\n  return { ...state, entities, ids }\n}\n\nfunction applyAddCardToLane(state, action) {\n  const { laneId, cardId } = action.card\n  const lane = state.entities[laneId]\n  const updatedLane = { ...lane, cardIds: [...lane.cardIds, cardId] }\n  const entities = { ...state.entities, [laneId]: updatedLane }\n\n  return { ...state, entities }\n}\n\nfunction applyMoveCard(state, action) {\n  const { sourceCardId, targetId } = action\n\n  // Search source and target lanes\n  let sourceLaneId = null\n  let targetLaneId = null\n  const idsLength = state.ids.length\n\n  for (let i = 0; i < idsLength; i += 1) {\n    const laneCardIds = state.entities[state.ids[i]].cardIds\n\n    const isSourceLaneFound = laneCardIds.includes(sourceCardId)\n    const isTargetLaneFound = laneCardIds.includes(targetId) || (state.ids[i] === targetId) // second condition need to handle card moving to new empty lane\n\n    if (isSourceLaneFound) {\n      sourceLaneId = state.ids[i]\n      if (targetLaneId) break\n    }\n\n    if (isTargetLaneFound) {\n      targetLaneId = state.ids[i]\n      if (sourceLaneId) break\n    }\n  }\n\n  const sourceLane = state.entities[sourceLaneId]\n  const targetLane = state.entities[targetLaneId] || state.entities[targetId] // second condition need to handle card moving to new empty lane\n\n  // Search source and target card indexes in cardIds array\n  const sourceCardIndex = sourceLane.cardIds.findIndex(cardId => cardId === sourceCardId)\n  const targetCardIndex = targetLane.cardIds.findIndex(cardId => cardId === targetId)\n\n  // Perform card move within one lane\n  if (sourceLaneId === targetLaneId) {\n    const updatedCardIds = [...sourceLane.cardIds]\n    updatedCardIds.splice(sourceCardIndex, 1)\n    updatedCardIds.splice(targetCardIndex, 0, sourceCardId)\n\n    const updatedLane = { ...sourceLane, cardIds: updatedCardIds }\n    const entities = { ...state.entities, [sourceLaneId]: updatedLane }\n    return { ...state, entities }\n  }\n\n  // Perform card move between lanes\n  const updatedSourceLaneCardIds = [...sourceLane.cardIds]\n  updatedSourceLaneCardIds.splice(sourceCardIndex, 1)\n  const updatedSourceLane = { ...sourceLane, cardIds: updatedSourceLaneCardIds } \n\n  const updatedTargetLaneCardIds = [...targetLane.cardIds]\n  updatedTargetLaneCardIds.splice(targetCardIndex, 0, sourceCardId)\n  const updatedTargetLane = { ...targetLane, cardIds: updatedTargetLaneCardIds }\n\n  const entities = { ...state.entities, [sourceLaneId]: updatedSourceLane, [targetLaneId]: updatedTargetLane }\n\n  return { ...state, entities }\n}\n\nfunction laneReducer(state = { entities: {}, ids: [] }, action) {\n  switch (action.type) {\n    case LANE_ADD: {\n      return applyAddLane(state, action)\n    }\n    case CARD_ADD: {\n      return applyAddCardToLane(state, action)\n    }\n    case CARD_MOVE: {\n      return applyMoveCard(state, action)\n    }\n    default: return state\n  }\n}\n\nexport default laneReducer\n","import { CARD_ADD } from '../constants/actionTypes'\n\nfunction applyAddCard(state, action) {\n  const { cardId, task } = action.card\n  const card = { id: cardId, task: task.trim() }\n  const entities = { ...state.entities, [cardId]: card }\n  const ids = [...state.ids, cardId]\n\n  return { ...state, entities, ids }\n}\n\nfunction cardReducer(state = { entities: {}, ids: [] }, action) {\n  switch (action.type) {\n    case CARD_ADD: {\n      return applyAddCard(state, action)\n    }\n    default: return state\n  }\n}\n\nexport default cardReducer\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger'\n\nimport laneReducer from '../reducers/laneReducer'\nimport cardReducer from '../reducers/cardReducer'\n\nconst rootReducer = combineReducers({\n  laneState: laneReducer,\n  cardState: cardReducer,\n})\n\nconst logger = createLogger()\n\nconst store = createStore(\n  rootReducer,\n  undefined,\n  applyMiddleware(logger),\n)\n\nexport default store\n","import { LANE_ADD, CARD_MOVE } from '../constants/actionTypes'\n\nfunction doAddLane(name) {\n  return {\n    type: LANE_ADD,\n    name,\n  }\n}\n\nfunction doMoveCard(sourceCardId, targetId) {\n  return {\n    type: CARD_MOVE,\n    sourceCardId,\n    targetId,\n  }\n}\n\nexport {\n  doAddLane,\n  doMoveCard,\n}\n","export const ItemTypes = {\n  CARD: 'card',\n}\n","import React, { useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { DragSource, DropTarget } from 'react-dnd'\n\nimport { doMoveCard } from '../../action_creators/lanes'\nimport { ItemTypes } from '../../constants/dndTypes'\n\nfunction Card(props) {\n  const { task, connectDragSource, isDragging, connectDropTarget, isOver } = props\n\n  const cardRef = useRef()\n  // Assign the drag source role to a node\n  connectDragSource(cardRef)\n  // Assign the drop target role to a node\n  connectDropTarget(cardRef)\n\n  let cardClass = 'box card'\n  if (isDragging || isOver) { cardClass += ' card_dragging' }\n\n  return (\n    <div className={cardClass} ref={cardRef}>\n      {task}\n    </div>\n  )\n}\n\n// Handling drop\nconst dropSpec = {\n  hover(props, monitor) {\n    const { cardId, onCardMove } = props\n    const sourceCardId = monitor.getItem().cardId\n    const targetCardId = cardId\n\n\n    if (sourceCardId === targetCardId) return\n\n    // Perform the move\n    onCardMove(sourceCardId, targetCardId)\n  },\n}\n\nfunction dropCollect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n  }\n}\n\n// Handling drag'n'drop\nconst dragSpec = {\n  beginDrag(props) {\n    const { cardId } = props\n    return { cardId }\n  },\n}\n\nfunction dragCollect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  }\n}\n\nconst DragSourceCard = DragSource(ItemTypes.CARD, dragSpec, dragCollect)(Card)\nconst DropTargetCard = DropTarget(ItemTypes.CARD, dropSpec, dropCollect)(DragSourceCard)\n\n// Connecting redux\nfunction mapStateToProps(state, props) {\n  return {\n    task: state.cardState.entities[props.cardId].task,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onCardMove: (sourceCardId, targetCardId) => dispatch(doMoveCard(sourceCardId, targetCardId)),\n  }\n}\n\nconst ConnectedCard = connect(mapStateToProps, mapDispatchToProps)(DropTargetCard)\n\nexport default ConnectedCard\n","import Card from './Card'\n\nexport default Card\n","import { useState, useEffect } from 'react'\n\n// Custom state hook to control elements and validate input\nfunction useControlledInput(defaultValue = '', defaultValidation = false, validationCallback = value => /\\S+/.test(value)) {\n  const [input, setInput] = useState(defaultValue)\n  const [isInputValid, setIsInputValid] = useState(defaultValidation)\n\n  useEffect(() => {\n    const validationResult = validationCallback(input)\n    setIsInputValid(validationResult)\n  }, [input])\n\n  return [\n    input,\n    setInput,\n    isInputValid,\n    setIsInputValid,\n  ]\n}\n\nexport default useControlledInput\n","import useControlledInput from './useControlledInput'\n\nexport default useControlledInput\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport uuid from 'uuid/v4'\n\nimport { doAddLane } from '../../action_creators/lanes'\nimport { doAddCard } from '../../action_creators/cards'\n\nimport useControlledInput from '../../customHooks/useControlledInput'\n\nimport plusIcon from '../../assets/img/plusIcon.svg'\nimport crossIcon from '../../assets/img/crossIcon.svg'\n\nfunction AddNew({ type, laneId, onAdd }) {\n  const [value, setValue, isValueValid] = useControlledInput()\n  const [isAdding, setIsAdding] = useState(false)\n\n  function onAddNewClick() {\n    setIsAdding(true)\n  }\n\n  function onAddNewClose() {\n    setIsAdding(false)\n    setValue('')\n  }\n\n  function onAddNewFinish() {\n    if (!isValueValid) return\n\n    onAdd(value, laneId)\n    onAddNewClose()\n  }\n\n  function onInputChange(e) {\n    setValue(e.target.value)\n  }\n\n  function onInputKeyDown(e) {\n    const { key, shiftKey } = e\n\n    switch (true) {\n      case (shiftKey && key === 'Enter'): {\n        break\n      }\n\n      case (key === 'Enter'): {\n        onAddNewFinish()\n        break\n      }\n\n      case (key === 'Escape' || key === 'Esc'): {\n        onAddNewClose()\n        break\n      }\n\n      default:\n        break\n    }\n  }\n\n  const laneOrCardAccusative = type === 'lane' ? 'колонку' : 'карточку'\n  const laneOrCardGenitive = type === 'lane' ? 'колонки' : 'карточки'\n\n  const textFieldProps = {\n    placeholder: `Введите название ${laneOrCardGenitive}`,\n    value,\n    onChange: onInputChange,\n    onKeyDown: onInputKeyDown,\n    autoFocus: true,\n  }\n\n  return (\n    isAdding\n      ? (\n        <div className={`column add-new add-new_${type} add-new__form`}>\n          {type === 'lane' ? <input className=\"box input add-new__input\" type=\"text\" {...textFieldProps} /> : <textarea className=\"box textarea add-new__textarea\" rows=\"2\" {...textFieldProps} />}\n          <div className=\"row add-new__buttons\">\n            <button className=\"button add-new__button\" type=\"button\" disabled={!isValueValid} onClick={onAddNewFinish}>{`Добавить ${laneOrCardAccusative}`}</button>\n            <img className=\"add-new__icon-cross\" src={crossIcon} alt=\"Close\" onClick={onAddNewClose} />\n          </div>\n        </div>\n      )\n\n      : (\n        <div className={`row add-new add-new_${type} add-new__placeholder-${type}`} onClick={onAddNewClick}>\n          <img className=\"add-new__icon-add\" src={plusIcon} alt={`New ${type}`} />\n          <div className=\"add-new__text\">{`Добавить еще одну ${laneOrCardAccusative}`}</div>\n        </div>\n      )\n\n  )\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    onAdd: (value, laneId) => dispatch(props.type === 'lane' ? doAddLane(value) : doAddCard({ laneId, cardId: uuid(), task: value })),\n  }\n}\n\nconst ConnectedAddNew = connect(null, mapDispatchToProps)(AddNew)\n\nexport default ConnectedAddNew\n","import AddNew from './AddNew'\n\nexport default AddNew\n","import { CARD_ADD } from '../constants/actionTypes'\n\nfunction doAddCard(card) {\n  return {\n    type: CARD_ADD,\n    card,\n  }\n}\n\nexport {\n  doAddCard,\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { DropTarget } from 'react-dnd'\n\nimport { doMoveCard } from '../../action_creators/lanes'\nimport { ItemTypes } from '../../constants/dndTypes'\n\nimport Card from '../Card'\nimport AddNew from '../AddNew'\n\nfunction Lane({ lane, connectDropTarget }) {\n  return connectDropTarget(\n    <div className=\"column lane\">\n      <div className=\"lane__header\">{lane.name}</div>\n\n      <div className=\"lane__body\">\n        {lane.cardIds.map((cardId) => {\n          return <Card key={cardId} cardId={cardId} />\n        })}\n      </div>\n\n      <div className=\"lane__footer\">\n        <AddNew type=\"card\" laneId={lane.id} />\n      </div>\n    </div>,\n  )\n}\n\n// Handling drop\nconst dropSpec = {\n  hover(props, monitor) {\n    const { lane, onCardMove } = props\n\n    const sourceCardId = monitor.getItem().cardId\n\n    if (lane.cardIds.length) return\n\n    // Perform the move\n    onCardMove(sourceCardId, lane.id)\n  },\n}\n\nfunction dropCollect(connect) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n  }\n}\n\nconst DropTargetLane = DropTarget(ItemTypes.CARD, dropSpec, dropCollect)(Lane)\n\n// Connecting redux\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onCardMove: (sourceCardId, laneId) => dispatch(doMoveCard(sourceCardId, laneId)),\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  return {\n    lane: state.laneState.entities[props.laneId],\n  }\n}\n\nconst ConnectedLane = connect(mapStateToProps, mapDispatchToProps)(DropTargetLane)\n\nexport default ConnectedLane\n","import Lane from './Lane'\n\nexport default Lane\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Lane from '../Lane'\nimport AddNew from '../AddNew'\n\nfunction App({ laneIds }) {\n  return (\n    <div className=\"row app\">\n      {Boolean(laneIds.length) && laneIds.map(laneId => (\n        <Lane key={laneId} laneId={laneId} />\n      ))}\n\n      <AddNew type=\"lane\" />\n    </div>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n    laneIds: state.laneState.ids,\n  }\n}\n\nconst ConnectedApp = connect(mapStateToProps)(App)\n\nexport default ConnectedApp\n","import App from './App'\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { DragDropContextProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\n\nimport store from './store'\nimport App from './components/App'\n\nimport './index.scss'\n\nif (module.hot) {\n  module.hot.accept()\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <DragDropContextProvider backend={HTML5Backend}>\n      <App />\n    </DragDropContextProvider>\n  </Provider>,\n\n  document.getElementById('root'),\n)\n","module.exports = __webpack_public_path__ + \"static/media/plusIcon.61af6571.svg\";","module.exports = __webpack_public_path__ + \"static/media/crossIcon.220fb32e.svg\";"],"sourceRoot":""}